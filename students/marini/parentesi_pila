#include <stdio.h>
#include <stdlib.h>
#define  MAX 8
typedef struct nodo{
    int info;
    struct nodo* next;
}node;
int length(node* top, int i){
    if(top != NULL)
		return length(top->next,++i);
	else
		return i;
}
void clear(node** top)
{
	if(*top !=NULL)
	{
		node* x = *top;
		*top = (*top)->next;
		free(x);
		clear(top);
	}
}
void push(node** top,int value){
    node* newNodo = malloc(sizeof(node*));
    newNodo->info = value;
    newNodo->next = *top;
    *top = newNodo;
}
char pop(node** top){
    node* x = *top;
    *top = (*top)->next;
    char tmp = x->info;
    free(x);
    return tmp;
}

void controllo_parentesi(node** stack, char str[]){
    for(int i =0;i<MAX;i++){
        if(str[i]=='('){ //se incontro una parentesi aperta
           push(stack,str[i]); //la pusho
        }
        else if(str[i] == ')'){ //se incontro una chiusa
            if(*stack==NULL){ //controllo se c'e' una parentesi aperta
                printf("Espressione errata."); //se non c'e' l'espressione e' errata
                return;
            }
            else{ //altrimenti la estraggo
                pop(stack);
            }

        }
    }
    if(*stack==NULL){ //quando finisco l'espressione controllo se ci sono parestesi aperte in piu'
        printf("Espressione corretta.");
    }
    else
        printf("Espressione errata.");
}

int main(){
    char s[MAX];
    node* es=NULL;
    printf("Inserisci Stringa : ");
    scanf("%s", s);
    controllo_parentesi(&es,s);

}
